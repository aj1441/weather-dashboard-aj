"""Custom themes for the weather dashboard"""

import ttkbootstrap as tb
import logging

logger = logging.getLogger(__name__)

def register_custom_themes():
    """Register custom themes using ttkbootstrap style system"""
    try:
        # Import ThemeManager
        from .theme_manager import ThemeManager
        theme_manager = ThemeManager()
        
        # Register all themes using the manager
        result = theme_manager.register_all_custom_themes()
        if result:
            logger.info("Successfully registered all custom themes")
        else:
            logger.warning("Some themes may not have been registered correctly")
            
        return result
    except Exception as e:
        logger.error(f"Failed to register custom themes: {e}")
        return False
                
                # Configure root style
                style.configure(
                    f".{theme_name}", 
                    background=colors.get("bg"),
                    foreground=colors.get("fg"),
                    troughcolor=colors.get("dark"),
                    selectbackground=colors.get("selectbg"),
                    selectforeground=colors.get("selectfg"),
                    insertcolor=colors.get("fg"),
                    bordercolor=colors.get("border")
                )
                
                # Configure buttons
                style.configure(
                    f"{theme_name}.TButton",
                    background=colors.get("primary"),
                    foreground="#ffffff",
                    bordercolor=colors.get("border")
                )
                
                # Configure toolbuttons for toggles
                style.configure(
                    f"{theme_name}.Toolbutton",
                    background=colors.get("bg"),
                    foreground=colors.get("fg")
                )
                
                # Add toggle button mappings
                style.map(
                    f"{theme_name}.Toolbutton",
                    background=[
                        ("selected", colors.get("primary")),
                        ("active", colors.get("primary"))
                    ],
                    foreground=[
                        ("selected", "#ffffff"),
                        ("active", "#ffffff")
                    ]
                )
                
                # Configure other widget styles
                style.configure(
                    f"{theme_name}.TEntry",
                    fieldbackground=colors.get("inputbg"),
                    foreground=colors.get("inputfg")
                )
                
                style.configure(
                    f"{theme_name}.TFrame",
                    background=colors.get("bg")
                )
                
                style.configure(
                    f"{theme_name}.TLabel",
                    background=colors.get("bg"),
                    foreground=colors.get("fg")
                )

                # Configure notebook and tabs
                style.configure(
                    f"{theme_name}.TNotebook",
                    background=colors.get("bg")
                )
                
                style.configure(
                    f"{theme_name}.TNotebook.Tab",
                    background=colors.get("bg"),
                    foreground=colors.get("fg")
                )
                
                logger.info(f"Successfully registered theme: {theme_name}")
                
            except Exception as e:
                logger.error(f"Failed to register theme {theme_name}: {e}")
                continue
                
        return True
        
    except Exception as e:
        logger.error(f"Failed to register custom themes: {e}")
        return False

def is_custom_theme(theme_name):
    """Check if a theme name is one of our custom themes"""
    return theme_name in ["aj_darkly", "aj_lightly"]

def get_fallback_theme(theme_name):
    """Get fallback theme for custom themes that might not be registered"""
    if theme_name == "aj_darkly":
        return "darkly"  # Use standard dark theme as fallback
    elif theme_name == "aj_lightly":
        return "pulse"   # Use standard light theme as fallback
    return theme_name

def get_available_themes():
    """Get all available themes including custom ones"""
    # Standard light and dark themes
    standard_themes = {
        "light": ["aj_lightly", "pulse", "flatly", "litera", "minty", "lumen"],
        "dark": ["aj_darkly", "darkly", "cyborg", "superhero", "solar"]
    }
    
    return standard_themes